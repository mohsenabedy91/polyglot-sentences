version: '3.8'

services:
  postgres:
    image: postgres:16.3
    container_name: postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "${DB_FORWARD_PORT:-5432}:5432"
    restart: always
    networks:
      - default
      - app_network
    environment:
      - POSTGRES_USER=${DB_USERNAME:-polyglot_sentences}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-polyglot_sentences}
      - POSTGRES_DB=${DB_NAME:-polyglot_sentences}

  redis:
    image: redis:7.2.4
    container_name: redis
    volumes:
      - redis:/etc/redis
    ports:
      - "${REDIS_FORWARD_PORT:-6379}:6379"
    restart: always
    networks:
      - default
      - app_network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "8080:8080"
    restart: always
    deploy:
      mode: global

  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: prometheus
    restart: always
    volumes:
      - ./docker/prometheus:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - cadvisor

  node-exporter:
    image: prom/node-exporter:v1.8.0
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    ports:
      - "9100:9100"
    restart: always
    deploy:
      mode: global

  alertmanager:
    image: prom/alertmanager:v0.27.0
    container_name: alertmanager
    restart: always
    ports:
      - "9093:9093"
    volumes:
      - ./docker/alertmanager/:/etc/alertmanager/
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  grafana:
    image: grafana/grafana:10.1.10
    user: '472'
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-simple-json-datasource'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./docker/grafana/config.monitoring
    depends_on:
      - prometheus
    restart: always

  ####################### SETUP #######################
  setup:
    build:
      context: docker/elk/setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: setup
    init: true
    volumes:
      - ./docker/elk/setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./docker/elk/setup/helpers.sh:/helpers.sh:ro,Z
      - ./docker/elk/setup/roles:/roles:ro,Z
      - setup:/state:Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
    networks:
      - app_network
    depends_on:
      - elasticsearch

  ####################### ELK #######################
  elasticsearch:
    build:
      context: docker/elk/elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: elasticsearch
    volumes:
      - ./docker/elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      discovery.type: single-node
    networks:
      - app_network
    restart: unless-stopped

  kibana:
    build:
      context: docker/elk/kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: kibana
    volumes:
      - ./docker/elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
      - elasticsearch:/usr/share/kibana/data:Z
    ports:
      - "5601:5601"
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - app_network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  filebeat:
    build:
      context: docker/elk/filebeat/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: filebeat
    user: root
    command:
      - -e
      - --strict.perms=false
    volumes:
      - ./docker/elk/filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./logs:/var/log/filebeat/service:ro
      - logs:/var/log/filebeat
      - logs:/app:ro
    environment:
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
    networks:
      - app_network
    depends_on:
      - elasticsearch

  rabbitmq:
    image: rabbitmq-3-12-management
    build:
      context: .
      dockerfile: Dockerfile-rabbitmq
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  db:
    image: "postgres:9.6"
    container_name: "kong-database"
    restart: always
    volumes:
      - "kong_db_data:/var/lib/postgresql/data"
    environment:
      - POSTGRES_USER=${KONG_POSTGRES_USER}
      - POSTGRES_DB=${KONG_POSTGRES_DATABASE}
      - POSTGRES_PASSWORD=${KONG_POSTGRES_PASSWORD}
    ports:
      - "${KONG_POSTGRES_PORT}:5432"
    networks:
      - app_network

  kong:
    image: "kong/kong-gateway:3.6"
    container_name: "kong-gateway"
    restart: on-failure
    depends_on:
      - "db"
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
      - "8002:8002"
      - "8445:8445"
      - "8003:8003"
      - "8004:8004"
    environment:
      - KONG_DATABASE=${KONG_POSTGRES_CONNECTION}
      - KONG_PG_HOST=${KONG_DB_HOST}
      - KONG_PG_USER=${KONG_POSTGRES_USER}
      - KONG_PG_PASSWORD=${KONG_POSTGRES_PASSWORD}
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_ADMIN_GUI_URL=http://localhost:8002
      - KONG_LUA_PACKAGE_PATH=/kong/plugins/?.lua
      - KONG_CUSTOM_PLUGINS=${KONG_CUSTOM_PLUGINS}
      - KONG_LICENSE_DATA
    volumes:
      - ./docker/kong/:/kong/
    command: sh -c "
      kong migrations bootstrap
      && kong migrations up
      && kong migrations finish
      && kong start -c /kong/kong.conf
      "
    networks:
      - app_network

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "${MINIO_PORT:-9000}:9000"
    environment:
      MINIO_ROOT_USER: ${MINIO_ID}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET}
    volumes:
      - minio_data:/data
    command: server /data

volumes:
  postgres:
  redis:
  grafana_data:
  prometheus_data:
  setup:
  elasticsearch:
  logs:
  rabbitmq_data:
  kong_db_data:
  minio_data:

networks:
  default:
    driver: bridge
  app_network:
    driver: bridge
    external: true